/*
 * Copyright 2019-2020 Elypia CIC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects() {
    apply plugin: "idea"
    apply plugin: "jacoco"

    group = "org.elypia.alexis"
    version = "3.0.0"
    description = "Hey! I'm a chatbot for Discord!"

    ext {
        comcordVersion = "2.0.0"
        commandlerVersion = "4.0.1"
        elypiaiVersion = "4.1.0"
        deltaSpikeVersion = "1.9.4"
        hibernateVersion = "5.4.17.Final"
        junitVersion = "5.6.2"
        slf4jVersion = "1.7.30"
    }

    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url "https://oss.jfrog.org/artifactory/libs-release" }

        // Local system
        mavenLocal()
    }

    /** Coverage **/

    jacoco {
        toolVersion = "0.8.5"
    }
}

subprojects() {
    apply plugin: "java"

    sourceCompatibility = 11
    targetCompatibility = 11

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    dependencies {
        // Elypiai
        implementation "org.elypia.elypiai:cleverbot:${elypiaiVersion}"
        implementation "org.elypia.elypiai:osu:${elypiaiVersion}"
        implementation "org.elypia.elypiai:path-of-exile:${elypiaiVersion}"
        implementation "org.elypia.elypiai:runescape:${elypiaiVersion}"
        implementation "org.elypia.elypiai:steam:${elypiaiVersion}"
        implementation "org.elypia.elypiai:urban-dictionary:${elypiaiVersion}"
        implementation "org.elypia.elypiai:yugioh-prices:${elypiaiVersion}"

        // Twitch
        implementation "com.github.twitch4j:twitch4j:1.0.0-alpha.24"

        // Google Translate and YouTube
        implementation "com.google.cloud:google-cloud-translate:1.94.5"
        implementation "com.google.apis:google-api-services-youtube:v3-rev20200518-1.30.9"

        // Database
        implementation "org.hibernate:hibernate-core:${hibernateVersion}"
        runtimeOnly "org.hibernate:hibernate-c3p0:${hibernateVersion}"
        runtimeOnly "mysql:mysql-connector-java:8.0.20"
        runtimeOnly "com.h2database:h2:1.4.200"

        // Logging
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
        implementation "com.google.cloud:google-cloud-logging-logback:0.116.0-alpha"

        // Testing
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testImplementation "org.mockito:mockito-core:3.3.3"
        testImplementation "org.apache.deltaspike.modules:deltaspike-test-control-module-impl:${deltaSpikeVersion}"
        testRuntimeOnly "org.apache.deltaspike.modules:deltaspike-test-control-module-api:${deltaSpikeVersion}"
    }

    jar {
        duplicatesStrategy = 'exclude'
    }

    /** Testing */

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        reports {
            html.enabled = false
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = false
            xml.enabled = false
        }
    }
}


/** Combine and ouput code coverage. */

task jacocoMerge(type: JacocoMerge) {
    executionData = files(subprojects.jacocoTestReport.executionData.findAll {it.asList() })

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task jacocoReport(type: JacocoReport, dependsOn: jacocoMerge) {
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs.findAll { it.asList() })
    classDirectories.from = files(subprojects.sourceSets.main.output.findAll { it.asList() })
    executionData.from = files(jacocoMerge.destinationFile)

    reports {
        html.enabled = true
        xml.enabled = false
    }
}
