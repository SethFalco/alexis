buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
	}
}

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
  	}

	dependencies {
		classpath "gradle.plugin.com.sedmelluq:jdaction:1.0.2"
	}
}

plugins {
  id 'com.sedmelluq.jdaction' version '1.0.2'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.junit.platform.gradle.plugin'

jar{
	manifest {
		attributes 	'Implementation-Title'	 : 'Alexis',
					'Implementation-Version' : '1.0.0'
	}
}

repositories  {
    jcenter()
}

dependencies {
	implementation 'net.dv8tion:JDA:3.5.1_348'
	implementation 'com.sedmelluq:lavaplayer:1.2.56'
	implementation 'com.elypia:elypiai:1.0.2'
	implementation group: 'org.mongodb', name: 'mongodb-driver', version: '3.6.3'

	runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0'

	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0'
	testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.1.0'

	// Temp until no more data to port from old database
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.9-rc'
}

compileJava {
	options.compilerArgs += '-Xlint:unchecked'
}

junitPlatform {
	details 'tree'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '4.6'
}

import groovy.io.FileType

import java.util.regex.Matcher
import java.util.regex.Pattern

class SecretTask extends DefaultTask {

	@TaskAction
	void search() {
		final File currentDirectory = new File(".")
		final List<File> files = new ArrayList<>()

		currentDirectory.eachFileRecurse(FileType.FILES) { file ->
			String name = file.getCanonicalPath()

			if (!name.contains("Test") && name.endsWith(".java"))
				files << file
		}

		files.each { file ->
			boolean failed
			List<String> lines

			try {
				lines = file.readLines()
			} catch (IOException) {
				System.err.printf("Unable to read: '%s'%n", file.getCanonicalPath())
				return
			}

			Map<String, Pattern> patterns = new HashMap<>()
			patterns.put("Discord Bot Token", Pattern.compile(/(?i)[A-Z\d]{24}\.[A-Z\d-_]{6}\.[A-Z\d-_]{27}/))
			patterns.put("Amazon Access Key", Pattern.compile(/AKIA[IJ][A-Z2-7]{14}[AQ]/))
			patterns.put("Amazon Secret", Pattern.compile(/(?i)\b[A-Z\d\/+]{40}\b/))
			patterns.put("Steam API Key", Pattern.compile(/[A-F\d]{32}/))

			for (int i = 0; i < lines.size(); i++) {
				patterns.forEach { name, pattern ->
					Matcher match = pattern.matcher(lines[i])

					while (match.find()) {
						String message = "Found %s at: '%s' line: %d%n"
						System.err.printf(message, name, file.getCanonicalPath(), i + 1)
						failed = true
					}
				}
			}

			if (failed) {
				String message = "Found secrets in the code, read logs and revoke these ASAP."
				throw new GradleScriptException(message, null)
			}
		}
	}
}

task search(type: SecretTask)
